const rs = require("readline-sync");

const boardSize = 10; //hardcoded playing board size of 3x3
const letter = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
]; //array of letters to use to generate yCoordinate

const battleShipCount = 5; //hardcoded number of battleships to generate
const boardLayout = new Set();
const battleShips = new Map();
const shipCoordinates = new Set();
let spaceVacancyCheck;

const guesses = new Set();

//generates playing board based on hardcoded quantity
function boardGenerator(size) {
  for (let i = 0; i < size; i++) {
    for (let j = 0; j < size; j++) {
      boardLayout.add(letter[i] + (j + 1));
    }
  }
}

//generates battleships based on hardcoded quantity
function battleShipGenerator(numOfShips) {
  for (let i = 0; i < numOfShips; i++) {
    let shipXCoord = randomXCoord(boardSize);
    let shipYCoord = randomYCoord(boardSize);
    let yCoordIndex = letter.indexOf(`${shipYCoord}`);
    let shipOrientation = randomOrientation();
    let shipStartLocation = shipYCoord + shipXCoord;
    let lengthOfShip = 0;
    let shipLocation = [];
    shipLocation.push(shipStartLocation);

    if (i === 0) {
      lengthOfShip = 2;
      shipsLocationPoints(lengthOfShip);
    } else if (i > 0 && i <= 2) {
      lengthOfShip = 3;
      shipsLocationPoints(lengthOfShip);
    } else if (i === 3) {
      lengthOfShip = 4;
      shipsLocationPoints(lengthOfShip);
    } else if (i === 4) {
      lengthOfShip = 5;
      shipsLocationPoints(lengthOfShip);
    }

    function shipsLocationPoints(lengthOfShip) {
      shipCoordinates.add(shipStartLocation);
      for (let j = 1; j < lengthOfShip; j++) {
        if (shipOrientation === "h") {
          shipLocation.push(shipYCoord + (shipXCoord + j));
          shipCoordinates.add(shipYCoord + (shipXCoord + j));
        } else {
          shipLocation.push(letter[yCoordIndex + j] + shipXCoord);
          shipCoordinates.add(letter[yCoordIndex + j] + shipXCoord);
        }
      }
      battleShips.set(`battleShip${i + 1}`, shipLocation);
    }
  }
}

//use to generate random yCoordinate each battleship will be placed at
function randomYCoord(max) {
  return letter[Math.floor(Math.random() * max)];
}

//use to generate random xCoordinate each battleship will be placed at
function randomXCoord(max) {
  return Math.floor(Math.random() * max + 1);
}

//use to generate random orientation of ship (horizontal or vertical)
function randomOrientation() {
  if (Math.random() < 0.5) {
    return "h";
  } else {
    return "v";
  }
}

//used to check if the boardLayout has the location generated by the battleShipGenerator
function shipLocationCheck() {
  for (let [name, location] of battleShips) {
    for (let i = 0; i < location.length; i++) {
      if (!boardLayout.has(location[i])) {
        return true;
      }
    }
  }
}

//used to make sure all randomly generated coordinates do not share the same spaces
function shipBoardPlacement() {
  battleShips.clear();
  shipCoordinates.clear();
  battleShipGenerator(battleShipCount);
  spaceVacancyCheck = shipLocationCheck();
}

//checks if players guess is a space that exists on the board
function boardSpaceExists(space) {
  if (!boardLayout.has(space)) {
    console.log("\n     That space does not exist on the board\n");
  }
}
//logs players guess
function playerGuess() {
  console.log("\nEnter a location to strike ie. 'A2'");
  return rs.prompt().toUpperCase();
}

//checks if players guess is a hit, miss, or has already been guessed
function guessChecker(guess) {
  if (!guesses.has(guess)) {
    for (let [name, location] of battleShips) {
      // console.log(name+":"+location.length);
      if (location.includes(guess)) {
        let spot = location.indexOf(guess);
        location.splice(spot, 1);
        if (location.length === 0) {
          battleShips.delete(name);
          return console.log(`\n      Hit!, you have sunk ${name}`);
        } else {
          return console.log("\n      Hit!");
        }
      } else {
        return console.log("\n      Miss!");
      }
    }
  } else {
    console.log("\n     You have already picked this location. Miss!");
  }
}

//runs entire game
function main() {
  // clear out all Set()'s
  boardLayout.clear();
  guesses.clear();

  // create playing board based on board size (hardcoded)
  boardGenerator(boardSize);

  // create battleships based on hardcoded quantity
  shipBoardPlacement();

  // loop to make sure that battleships created are not duplicates
  // and there are the proper amount of battleships in play
  while (shipCoordinates.size != 17 || spaceVacancyCheck) {
    shipBoardPlacement();
  }

  console.log("\nThe game board is 10x10\n");
  console.log(
    "The available spaces to strike are in an X Y coordinate system\n");
  console.log("   1  2  3  4  5  6  7  8  9  10 ");
  console.log("   _____________________________ ");
  console.log("A |\nB |\nC |\nD |\nE |\nF |\nG |\nH |\nI |\nJ |\n");
  console.log(battleShips);

  // loop that tracks number of battleships still alive and ends when no battleships exist in battleShips Map()
  while (battleShips.size > 0) {
    let guess = playerGuess();
    boardSpaceExists(guess);
    guessChecker(guess);
    guesses.add(guess);
  }

  console.log("\n\n***** CONGRATULATIONS! *****");
  console.log("You have destroyed all battle ships.\n");

  //play again query
  const playAgain = rs.keyInYN("     Would you like to play again?");
  if (playAgain) {
    main();
  } else {
    console.log("\nThank you for playing my Mini Battleship Game!\n");
  }
}

console.log("\n           Welcome to my Mini-Battleship Game!");
console.log("     This is a copy of the classic game Battleship\n");

const keyStart = rs.keyIn("           Press any key to start the game.\n");

main();


